package compiler;

public enum Sym {

    EOF,        // EOF
    ERROR,      // error
    IDENTIFIER, // Identifer
    NUMBER,     // number
    FLOATNUM,   // floating-constant
    STRING,     // string
    CHARACTER,  // character-constant
    NUMSIGN,    // #
    SEMI,       // ;
    DPLUS,      // ++
    DMINUS,     // --
    LPAREN,     // (
    RPAREN,     // )
    LSBRACKET,  // [
    RSBEACKET,  // ]
    PERIOD,     // .
    PTR,        // ->
    PLUS,       // +
    MINUS,      // -
    NOT,        // !
    COMPL,      // ~
    MUL,        // *
    BAND,       // &
    DIV,        // /
    MOD,        // %
    SHL,        // <<
    SHR,        // >>
    LESS,       // <
    LEQ,        // <=
    GREATER,    // >
    GEQ,        // >=
    EQ,         // ==
    NEQ,        // !=
    CARET,      // ^
    BOR,        // |
    AND,        // &&
    OR,         // ||
    QUES,       // ?
    COLON,      // :
    ASSIGN,     // =
    PLUSEQ,     // +=
    MINUSEQ,    // -=
    MULEQ,      // *=
    DIVEQ,      // /=
    MODEQ,      // %=
    SHLEQ,      // <<=
    SHREQ,      // >>=
    ANDEQ,      // &=
    CARETEQ,    // ^=
    OREQ,       // |=
    COMMA,      // ,
    LCBRACKET,  // {
    RCBRACKET,  // }
    AUTO,       // auto
    BREAK,      // break
    CASE,       // case
    CHAR,       // char
    CONST,      // const
    CONTINUE,   // continue
    DEFAULT,    // default
    DO,         // do
    DOUBLE,     // double
    ELSE,       // else
    ENUM,       // enum
    EXTERN,     // extern
    FLOAT,      // float
    FOR,        // for
    GOTO,       // goto
    IF,         // if
    INLINE,     // inline (since C99)
    INT,        // int
    LONG,       // long
    REGISTER,   // register
    RESTRICT,   // restrict (since C99)
    RETURN,     // return
    SHORT,      // short
    SIGNED,     // signed
    SIZEOF,     // sizeof
    STATIC,     // static
    STRUCT,     // struct
    SWITCH,     // switch
    TYPEDEF,    // typedef
    UNION,      // union
    UNSIGNED,   // unsigned
    VOID,       // void
    VOLATILE,   // volatile
    WHILE;      // while
}
